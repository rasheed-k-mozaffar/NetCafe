@inject ICommentsService CommentsService
@inject NavigationManager Nav
<div
    class="w-full border-2 border-gray-300 dark:border-gray-600 p-6 rounded-lg shadow-md my-3 transition-all dark:bg-gray-800">
    @*COMMENT HEADER*@
    <div class="flex justify-between items-center mb-2">
        <div class="flex items-center space-x-2">
            <div class="bg-blue-700 rounded-full px-3 py-1 text-white font-bold">
                @Comment.UserName[0].ToString().ToUpper()
            </div>
            <div>
                <p class="font-semibold dark:text-white">@Comment.UserName</p>
            </div>
        </div>

        <div class="flex items-center space-x-2">
            <AuthorizeView>
                <Authorized>
                    @if (context.User.FindFirst(ClaimTypes.NameIdentifier)!.Value == Comment.AppUserId ||
                    context.User.FindFirst(ClaimTypes.Role)!.Value == "AUTHOR")
                    {
                        <button @onclick="DeleteClicked" class="text-red-500 text-medium hover:underline">Delete</button>
                        <button @onclick="EditClicked" class="text-blue-500 text-medium hover:underline">Edit</button>
                    }
                </Authorized>
            </AuthorizeView>
        </div>
    </div>
    <p class="text-gray-600 dark:text-gray-400 text-sm mb-3">@Comment.PostedOn.ToShortDateString()</p>

    @*COMMENT BODY*@
    <div>
        <p class="text-gray-600 dark:text-gray-300 text-lg">@Comment.Content</p>
    </div>
</div>


@code {
    [Parameter] public CommentDto Comment { get; set; } = null!;
    [Parameter] public EventCallback OnDeleteClicked { get; set; }
    [Parameter] public EventCallback OnEditClicked { get; set; }

    private void DeleteClicked()
    {
        OnDeleteClicked.InvokeAsync();
    }

    private void EditClicked()
    {
        OnEditClicked.InvokeAsync();
    }
}
