@inject IFilesService FilesService
<InputFile OnChange="UploadNewImage" />
@if (!string.IsNullOrEmpty(newImage))
{
    <div class="my-3 bg-gray-700 p-5">
    <code>
            @newImage
                </code>
        <button class="py-2 w-full mt-5 ring-1 ring-red-500 rounded-md hover:bg-red-600 text-white "
            @onclick="ClearNewImage">
            Clear
        </button>
    </div>
}

@code {
    private string? newImage;
    private async Task UploadNewImage(InputFileChangeEventArgs e)
    {
        var conversion = await ConvertToIFormFile(e.File);
        var result = await FilesService.UploadFileAsync(conversion);
        if (result.IsSuccess)
        {
            newImage = $@"<div class='flex justify-center items-center my-5'><img src='{result.Value}' class='rounded-lg'/></div>";
        }
    }
    private void ClearNewImage()
    {
        newImage = null;
        StateHasChanged();
    }
    private static async Task<Microsoft.AspNetCore.Http.IFormFile> ConvertToIFormFile(IBrowserFile browserFile)
    {
        Stream stream = browserFile.OpenReadStream();
        MemoryStream memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        return new Microsoft.AspNetCore.Http.Internal.FormFile(memoryStream, 0, memoryStream.Length, "file", browserFile.Name);
    }
}
